<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üîß CVC Portal Itaqu√° - Diagn√≥stico de Configura√ß√£o</title>
    <style>
        body {
            font-family: 'Nunito', sans-serif;
            background: linear-gradient(135deg, #0A00B4, #FFE600);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            overflow: hidden;
        }
        .header {
            background: #0A00B4;
            color: white;
            padding: 30px;
            text-align: center;
        }
        .content {
            padding: 30px;
        }
        .status-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            margin: 10px 0;
            border-radius: 10px;
            border-left: 5px solid;
        }
        .status-success {
            background: #d4edda;
            border-color: #28a745;
            color: #155724;
        }
        .status-error {
            background: #f8d7da;
            border-color: #dc3545;
            color: #721c24;
        }
        .status-warning {
            background: #fff3cd;
            border-color: #ffc107;
            color: #856404;
        }
        .btn {
            background: #0A00B4;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            margin: 5px;
        }
        .btn:hover {
            background: #FFE600;
            color: #0A00B4;
        }
        .log-output {
            background: #1e1e1e;
            color: #00ff00;
            font-family: monospace;
            padding: 20px;
            border-radius: 10px;
            max-height: 400px;
            overflow-y: auto;
            margin: 20px 0;
        }
        .diagnostic-info {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß CVC Portal Itaqu√°</h1>
            <h2>Diagn√≥stico de Configura√ß√£o v10.0</h2>
        </div>
        
        <div class="content">
            <div class="diagnostic-info">
                <h3>üìä Status da Configura√ß√£o</h3>
                <div id="configStatus"></div>
            </div>
            
            <div class="diagnostic-info">
                <h3>üåê Informa√ß√µes do Sistema</h3>
                <div id="systemInfo"></div>
            </div>
            
            <div style="text-align: center; margin: 20px 0;">
                <button class="btn" onclick="executarDiagnostico()">üîç Executar Diagn√≥stico Completo</button>
                <button class="btn" onclick="testarAPI()">üåê Testar Conex√£o API</button>
                <button class="btn" onclick="limparLogs()">üóëÔ∏è Limpar Logs</button>
            </div>
            
            <div class="log-output" id="logOutput">
                <div>üîß CVC Portal Itaqu√° - Diagn√≥stico de Configura√ß√£o</div>
                <div>‚è∞ Aguardando execu√ß√£o do diagn√≥stico...</div>
            </div>
            
            <div class="diagnostic-info">
                <h3>üí° Instru√ß√µes de Corre√ß√£o</h3>
                <p><strong>Se aparecer "Configura√ß√£o inv√°lida":</strong></p>
                <ol>
                    <li>Verifique se o arquivo <code>config.js</code> est√° na mesma pasta</li>
                    <li>Confirme se a URL da API est√° correta</li>
                    <li>Verifique se todas as listas (VENDEDORES, TIPOS_SERVICO, etc.) est√£o preenchidas</li>
                    <li>Substitua o arquivo <code>config.js</code> pelo arquivo corrigido v10.0</li>
                </ol>
            </div>
        </div>
    </div>

    <script src="config.js"></script>
    <script>
        let logCount = 0;
        
        function adicionarLog(mensagem, tipo = 'info') {
            const logOutput = document.getElementById('logOutput');
            const timestamp = new Date().toLocaleTimeString();
            const icones = {
                success: '‚úÖ',
                error: '‚ùå',
                warning: '‚ö†Ô∏è',
                info: '‚ÑπÔ∏è'
            };
            
            const cores = {
                success: '#00ff00',
                error: '#ff5555',
                warning: '#ffff55',
                info: '#55ffff'
            };
            
            logCount++;
            const logLine = document.createElement('div');
            logLine.style.color = cores[tipo] || '#00ff00';
            logLine.innerHTML = `[${timestamp}] ${icones[tipo]} ${mensagem}`;
            
            logOutput.appendChild(logLine);
            logOutput.scrollTop = logOutput.scrollHeight;
        }
        
        function limparLogs() {
            document.getElementById('logOutput').innerHTML = `
                <div>üîß CVC Portal Itaqu√° - Diagn√≥stico de Configura√ß√£o</div>
                <div>‚è∞ Logs limpos - Execute novo diagn√≥stico...</div>
            `;
            logCount = 0;
        }
        
        function executarDiagnostico() {
            limparLogs();
            adicionarLog('üöÄ Iniciando diagn√≥stico completo...', 'info');
            
            // Teste 1: Verificar se config.js foi carregado
            adicionarLog('üìã Teste 1: Verificando carregamento do config.js...', 'info');
            if (typeof CVC_CONFIG !== 'undefined') {
                adicionarLog('‚úÖ CVC_CONFIG encontrado!', 'success');
            } else {
                adicionarLog('‚ùå CVC_CONFIG N√ÉO ENCONTRADO! Verifique se config.js est√° carregado.', 'error');
                return;
            }
            
            // Teste 2: Verificar fun√ß√£o getApiUrl
            adicionarLog('üìã Teste 2: Verificando fun√ß√£o getApiUrl...', 'info');
            if (typeof getApiUrl === 'function') {
                const apiUrl = getApiUrl();
                if (apiUrl) {
                    adicionarLog(`‚úÖ getApiUrl() funcionando: ${apiUrl}`, 'success');
                } else {
                    adicionarLog('‚ùå getApiUrl() retornou null/undefined!', 'error');
                }
            } else {
                adicionarLog('‚ùå Fun√ß√£o getApiUrl N√ÉO ENCONTRADA!', 'error');
            }
            
            // Teste 3: Validar configura√ß√£o
            adicionarLog('üìã Teste 3: Executando validateConfig()...', 'info');
            if (typeof validateConfig === 'function') {
                const validation = validateConfig();
                if (validation.valid) {
                    adicionarLog('‚úÖ Configura√ß√£o V√ÅLIDA!', 'success');
                } else {
                    adicionarLog('‚ùå Configura√ß√£o INV√ÅLIDA!', 'error');
                    validation.errors.forEach(erro => {
                        adicionarLog(`   ‚Ä¢ ${erro}`, 'error');
                    });
                }
            } else {
                adicionarLog('‚ùå Fun√ß√£o validateConfig N√ÉO ENCONTRADA!', 'error');
            }
            
            // Teste 4: Verificar listas essenciais
            adicionarLog('üìã Teste 4: Verificando listas essenciais...', 'info');
            
            const listas = [
                ['VENDEDORES', CVC_CONFIG.VENDEDORES],
                ['TIPOS_SERVICO', CVC_CONFIG.TIPOS_SERVICO],
                ['DEPARTAMENTOS', CVC_CONFIG.DEPARTAMENTOS]
            ];
            
            listas.forEach(([nome, lista]) => {
                if (Array.isArray(lista) && lista.length > 0) {
                    adicionarLog(`‚úÖ ${nome}: ${lista.length} itens`, 'success');
                } else {
                    adicionarLog(`‚ùå ${nome}: Vazio ou inv√°lido!`, 'error');
                }
            });
            
            // Teste 5: Verificar outras fun√ß√µes importantes
            adicionarLog('üìã Teste 5: Verificando outras fun√ß√µes...', 'info');
            const funcoes = ['debugLog', 'getConfig', 'applyTheme', 'updatePageTitle'];
            funcoes.forEach(funcao => {
                if (typeof window[funcao] === 'function') {
                    adicionarLog(`‚úÖ ${funcao}() dispon√≠vel`, 'success');
                } else {
                    adicionarLog(`‚ùå ${funcao}() N√ÉO ENCONTRADA!`, 'error');
                }
            });
            
            adicionarLog('üéØ Diagn√≥stico completo finalizado!', 'info');
            atualizarStatusVisual();
        }
        
        function testarAPI() {
            adicionarLog('üåê Testando conex√£o com a API...', 'info');
            
            if (typeof getApiUrl !== 'function') {
                adicionarLog('‚ùå Fun√ß√£o getApiUrl n√£o dispon√≠vel!', 'error');
                return;
            }
            
            const apiUrl = getApiUrl();
            if (!apiUrl) {
                adicionarLog('‚ùå URL da API n√£o configurada!', 'error');
                return;
            }
            
            adicionarLog(`üîó Testando: ${apiUrl}`, 'info');
            
            // Criar script JSONP para teste
            const callbackName = `testCallback_${Date.now()}`;
            window[callbackName] = function(result) {
                if (result && result.success) {
                    adicionarLog('‚úÖ API respondeu com sucesso!', 'success');
                    adicionarLog(`üìä Resposta: ${result.message || 'OK'}`, 'info');
                } else {
                    adicionarLog('‚ö†Ô∏è API respondeu, mas com erro', 'warning');
                    adicionarLog(`üìä Erro: ${result.message || 'Desconhecido'}`, 'warning');
                }
                
                // Limpeza
                script.remove();
                delete window[callbackName];
            };
            
            const script = document.createElement('script');
            script.src = `${apiUrl}?callback=${callbackName}&action=test`;
            script.onerror = () => {
                adicionarLog('‚ùå Erro ao conectar com a API!', 'error');
                script.remove();
                delete window[callbackName];
            };
            
            document.head.appendChild(script);
            
            // Timeout de 10 segundos
            setTimeout(() => {
                if (window[callbackName]) {
                    adicionarLog('‚è∞ Timeout: API n√£o respondeu em 10 segundos', 'warning');
                    script.remove();
                    delete window[callbackName];
                }
            }, 10000);
        }
        
        function atualizarStatusVisual() {
            const configStatus = document.getElementById('configStatus');
            const systemInfo = document.getElementById('systemInfo');
            
            // Status da configura√ß√£o
            let statusHTML = '';
            
            if (typeof CVC_CONFIG !== 'undefined') {
                statusHTML += '<div class="status-item status-success"><span>‚úÖ config.js carregado</span></div>';
                
                if (typeof getApiUrl === 'function' && getApiUrl()) {
                    statusHTML += '<div class="status-item status-success"><span>‚úÖ API URL configurada</span></div>';
                } else {
                    statusHTML += '<div class="status-item status-error"><span>‚ùå API URL n√£o configurada</span></div>';
                }
                
                if (typeof validateConfig === 'function') {
                    const validation = validateConfig();
                    if (validation.valid) {
                        statusHTML += '<div class="status-item status-success"><span>‚úÖ Configura√ß√£o v√°lida</span></div>';
                    } else {
                        statusHTML += '<div class="status-item status-error"><span>‚ùå Configura√ß√£o inv√°lida</span></div>';
                    }
                }
            } else {
                statusHTML += '<div class="status-item status-error"><span>‚ùå config.js N√ÉO carregado</span></div>';
            }
            
            configStatus.innerHTML = statusHTML;
            
            // Informa√ß√µes do sistema
            let infoHTML = '';
            if (typeof CVC_CONFIG !== 'undefined') {
                infoHTML += `<p><strong>Sistema:</strong> ${CVC_CONFIG.SYSTEM_NAME}</p>`;
                infoHTML += `<p><strong>Vers√£o:</strong> ${CVC_CONFIG.VERSION}</p>`;
                infoHTML += `<p><strong>Filial:</strong> ${CVC_CONFIG.NOME_FILIAL}</p>`;
                infoHTML += `<p><strong>API URL:</strong> ${CVC_CONFIG.API_URL ? '‚úÖ Configurada' : '‚ùå N√£o configurada'}</p>`;
                infoHTML += `<p><strong>Debug Mode:</strong> ${CVC_CONFIG.DEBUG_MODE ? '‚úÖ Ativo' : '‚ùå Inativo'}</p>`;
            } else {
                infoHTML = '<p>‚ùå Informa√ß√µes n√£o dispon√≠veis - config.js n√£o carregado</p>';
            }
            
            systemInfo.innerHTML = infoHTML;
        }
        
        // Executar diagn√≥stico inicial ao carregar
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                executarDiagnostico();
            }, 1000);
        });
    </script>
</body>
</html>
